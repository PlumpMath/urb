######################################################
#													 #
#    :: ufo - a stack-based lisp language ::         #
#													 #
# special is like dig a hole to wait for arguments	 #
# then execute when it has enough.					 #
# special form can goes for special hole			 #
# when statement is evaluated post-fix order.		 #
#													 #
######################################################
: ( square -> x ) ( x x * ) .
12 square


###################
#				  #
# @ - uneval mode #
# ! - eval mode   #
# ' - quote       #
#				  #
###################
( 12 13 )         ;; list data 
(1 2 3) '+ reduce ;; reduce a list with an operator

(System System.IO) 'using map

Urb namespace

MainClass (:partial :static :public) class 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                        ;;
;; [] is to force argument to function,   ;;
;; by adding new stack to next function.  ;;
;;                                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

listStack (:public :static) [Stack<List<object>> new] set


###########################################
#										  #
# better style and better at structure.   #
# we need cleaner code, not shorter mess. #
#                                         #
# duck typing analyzer ?                  #
#										  #
###########################################

: (sum -> a b c) :static :private (
    (a b c) '+ reduce
) .

: (static_method) :static :private (
    [ "This's static method" Console.WriteLine ]
) . 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                      ;;
;; expressive primitive types:          ;;
;; int, float, string, symbol, literal. ;;
;;                                      ;;
;; reference types = class instances.   ;;
;;                                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

: (static_method_2) :private (
    [ 1 2 3 "{1} {2} {3}" Console.WriteLine ]
) . 

;; label things to shorten code.

: (set_position -> x y z) :public (
    transform.position p label
        p.x x +
        p.y y +
        p.z z +
        Vector3 new p =
    p end
) .

;; end command to check ending of each name as segment key.

MainClass end