;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;													;;
;;    :: ufo - a stack-based lisp language ::       ;;
;;													;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

@ square (x) ( x x * ) ! defun
12 square

;;;;;;;;;;;;;;;;;;;;;
;;				   ;;
;; @ - uneval mode ;;
;; ! - eval mode   ;;
;; ' - quote       ;;
;; () - list data  ;;
;;				   ;;
;;;;;;;;;;;;;;;;;;;;;

( 12 13 )         ;; list data 
(1 2 3) '+ reduce ;; reduce a list with an operator

(System System.IO) 'using map

Urb namespace

MainClass (partial static public) class 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                        ;;
;; [] is to force argument to function,   ;;
;; by adding new stack to next function.  ;;
;;                                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MainClass.listStack member

def (sum -> a b c) (
    (a b c) '+ reduce
    ) 
end

def (static_method) (
        [ "This's static method" Console.WriteLine ]
    ) 
end 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                      ;;
;; expressive primitive types:          ;;
;; int, float, string, symbol, literal. ;;
;;                                      ;;
;; reference types = class instances.   ;;
;;                                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
: (static_method_2) :private (
    [ 1 2 3 "{1} {2} {3}" Console.WriteLine ]
) . 

;; label things to shorten code.
: (set_position -> x y z) :public (
    transform.position p label
        p.x x +
        p.y y +
        p.z z +
        Vector3 new p =
    p end
) .

;; end command to check ending of each name as segment key.
MainClass end