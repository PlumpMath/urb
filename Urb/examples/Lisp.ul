#############################################
#											#
# 'require' will add reference the library, #
# and using it at the same time, while		#
# 'import' just using the subset.			#
#											#
#############################################
(require System)
(require UnityEngine)
(import System.Collections.Generic)

(class :public StaticLibrary
	(progn
	   	(def (DemoBrace -> brace_test generic_test)
	   		 (void	    -> object[] Dictionary<string,object>)
	   		 (:public :static )
	   		 (progn)
	   	)
	)
)

(class :public GenericClass<T> 
	(progn
		###############
		#			  #
		# constructor #
		# 			  #
		###############
		(def (GenericClass -> type) 
			 (ctor -> T)
			 (:public)
			 (progn))
	)
)

##################################################
#												 #
#  :: class ::									 #
#												 #
# 'inherit' is like a function that output merge #
# of class name and all of its heritance types.  #
#												 #
##################################################
(class :public (inherit Player MonoBehaviour)
	(progn
		(set :public Name "deulamco")

		(set dict (new Dictionary<String,String>)) 

		(setstatic :public staticA "I'm static variable.")

		(def (Start -> _)
			 (void  -> _)
			 (progn
			  	(dict.Clear)
			  	(= staticA "modified.")))

		(def (ToString -> _)
			 (string   -> _) 
			 (:public :override)
			 (progn
			 	(return "ToString is Overrided.")))

		(def ( test -> _)
			 ( void -> _)
			 (:private)
			 (progn 
			  	(label Condition)
				(var i 0)
				(+= i 1)
				(Console.WriteLine i)
				(if (and (< i 10) (< -1 i) 
						 (or true false))
					(jump Condition))
				(var result i)
				(Console.WriteLine "Good bye {0} !" result)))


		(def (set_position -> x y z)
			 (void 		   -> float float float) 
			 (:public)
		  	 (progn 
			    ####################################
			    # 								   #
			    # '=' assignment is different from #
			    # 'set' because set work outside   # 
			    # method, when '=' is inside.	   #
			    #								   #
			    ####################################
			  	(= transform.position 
			    (new Vector3 
			    (+ transform.position.x x)
			    (+ transform.position.y y)
		 	    (+ transform.position.z z)))))
	)
)