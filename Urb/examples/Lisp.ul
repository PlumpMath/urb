;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                           ;;
;; 'require' will add reference the library, ;;
;; and using it at the same time, while      ;;
;; 'import' just using the subset.           ;;
;;                                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require System)
(import System.Collections.Generic)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; statements outside of class will be inside ReplEnvironment ns.
;; being invoked during compiling in-order of source code.
;; in C#:
;; ClassA.Invoke(ReplEnvironment.DoSomething, new object[]{a,b,c});
;;
;; * Interpreter main functions:
;;
;; 1. Define class/method/variables
;; 2. Invoke methods/variables.
;; 3. Refer assemblies as references.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(class StaticLibrary 
       (:public :static)
       (begin
           (def (DemoBrace -> brace_test generic_test)
           (void           -> object[]   Dictionary<string,object>)
           (:public :static )
           (begin))))

(class GenericClass<T> 
	   (:public)
       (begin
       (def (GenericClass -> type) 
            (ctor -> T)
            (:public)
            (begin))))

(class NormalClass 
       (:public)
       (begin
            (set user (:public) "deulamco")
            (set dict (new Dictionary<String,String>)) 
            
            (def (print -> line args)
                 (void  -> string params:object[]) 
                 (:public :static)
                 (begin
                    (Console.WriteLine line)))
                    
            (def (print -> line)
                 (void  -> string) 
                 (:public :static)
                 (begin
                    (Console.WriteLine line)))

            (def (pytago -> x y z)
	             (void   -> float float float)
                 (begin
                    (dict.Clear)
                    (print
                        (string.Format
                            "Pytago: {0}" 
                            (+ (* x x)
                               (* y y)
                               (* z z))))))

            (def (test -> _)
                 (void -> _)
                 (:private)
                    (begin 
                        (label Condition)
                        (var i 0)
                        (+= i 1)
                        (Console.WriteLine i)
                        (if (and (< i 10) (< -1 i) 
                                 (or true false))
                            (jump Condition))
                    	    (var result i)
                        (Console.WriteLine "Good bye {0} !" result)))			   	
	    )
)
