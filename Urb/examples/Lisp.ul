#############################################
#											#
# 'require' will add reference the library, #
# and using it at the same time, while		#
# 'import' just using the subset.			#
#											#
#############################################
(require System)
(require UnityEngine)
(import System.Collections.Generic)

(class :public StaticLibrary
	(begin
	   	(def (DemoBrace -> brace_test generic_test)
		   		 (void	    -> object[] Dictionary<string,object>)
		   		 (:public :static )
		   		 (begin)
	   	)
	)
)

(class :public GenericClass<T> 
	(begin
		###############
		#			  #
		# constructor #
		# 			  #
		###############
		(def (GenericClass -> type) 
				 (ctor -> T)
				 (:public)
				 (begin))
	)
)

##################################################
#												 #
#  :: class ::									 #
#												 #
# 'inherit' is like a function that output merge #
# of class name and all of its heritance types.  #
#												 #
##################################################
(class :public (inherit Player MonoBehaviour)
	(begin
		(set :public Name "deulamco")
		(set dict (new Dictionary<String,String>)) 

		(def (Start -> _)
			 	 (void  -> _)
			 	 (begin
			   		(dict.Clear)))

		(def (ToString -> _)
				 (string   -> _) 
				 (:public :override)
				 (begin
				 		(return "ToString is Overrided.")))

		(def (test -> _)
			   (void -> _)
				 (:private)
				 (begin 
				  	(label Condition)
						(var i 0)
						(+= i 1)
						(Console.WriteLine i)
						(if (and (< i 10) (< -1 i) 
								 (or true false))
								(jump Condition))
						(var result i)
						(Console.WriteLine "Good bye {0} !" result)))


		(def (set_position -> x y z)
				 (void  		   -> float float float) 
				 (:public)
			   (begin 
			   	 (= transform.position 
				   (new Vector3 
					    (+ transform.position.x x)
					    (+ transform.position.y y)
			 		    (+ transform.position.z z)))))
	)
)